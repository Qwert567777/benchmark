!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BENCH_ARG_BYTES	src/bench.h	13;"	d
BENCH_PROFILE_CMD_BYTES	src/bench.h	14;"	d
BG_WRITER_BASE	src/MRPM_bg.c	18;"	d	file:
BIN	Makefile	/^BIN = bin$/;"	m
BINS	Makefile	/^BINS	= $(BIN)\/fxmark$/;"	m
BRANCHING_OUT_FACTOR	src/MRPH.c	17;"	d	file:
BRANCHING_OUT_FACTOR	src/MRPM.c	17;"	d	file:
BRANCHING_OUT_FACTOR	src/MRPM_bg.c	17;"	d	file:
BUILD_VERBOSE	Makefile	/^BUILD_VERBOSE = $(V)$/;"	m
BuildFSLockingTable	bin/fs_locking_table.py	/^class BuildFSLockingTable(object):$/;"	c
CACHELINE_ALIGNED	src/bench.h	/^} CACHELINE_ALIGNED;$/;"	v	typeref:struct:bench
CACHELINE_ALIGNED	src/bench.h	/^} CACHELINE_ALIGNED;$/;"	v	typeref:struct:worker
CACHELINE_ALIGNED	src/bench.h	10;"	d
CACHELINE_SIZE	src/bench.h	9;"	d
CACHE_PER_CORE	bin/cpupol.py	/^CACHE_PER_CORE                = 30720$/;"	v
CACHE_PER_CORE	src/cpupol.h	/^const unsigned int CACHE_PER_CORE                  = 30720;$/;"	v
CORE_COARSE_GRAIN	bin/run-fxmark.py	/^    CORE_COARSE_GRAIN = 1$/;"	v	class:Runner
CORE_FINE_GRAIN	bin/run-fxmark.py	/^    CORE_FINE_GRAIN   = 0$/;"	v	class:Runner
CORE_PER_CHIP	bin/cpupol.py	/^CORE_PER_CHIP                 = 15$/;"	v
CORE_PER_CHIP	src/cpupol.h	/^const unsigned int CORE_PER_CHIP                   = 15;$/;"	v
CPUBase	bin/cpuinfo.py	/^class CPUBase(object):$/;"	c
CPUPOLS	Makefile	/^CPUPOLS = $(SRC)\/cpuinfo $(SRC)\/cpupol.h $(BIN)\/cpupol.py$/;"	m
CPU_POLICY	Makefile	/^CPU_POLICY = $(BIN)\/cpu-sequences | $(BIN)\/gen_corepolicy$/;"	m
CPU_STAT	bin/perfmon.py	/^    CPU_STAT   = ["real", "user", "nice", "sys", "idle",$/;"	v	class:PerfMon
CUR_DIR	bin/kibt.py	/^CUR_DIR     = os.path.abspath(os.path.dirname(__file__))$/;"	v
CUR_DIR	bin/parser.py	/^CUR_DIR     = os.path.abspath(os.path.dirname(__file__))$/;"	v
CUR_DIR	bin/perfmon.py	/^CUR_DIR     = os.path.abspath(os.path.dirname(__file__))$/;"	v
CUR_DIR	bin/perfstdio.py	/^CUR_DIR = os.path.abspath(os.path.dirname(__file__))$/;"	v
CUR_DIR	bin/plotter.py	/^CUR_DIR     = os.path.abspath(os.path.dirname(__file__))$/;"	v
CUR_DIR	bin/run-dbench.py	/^CUR_DIR = os.path.abspath(os.path.dirname(__file__))$/;"	v
CUR_DIR	bin/run-filebench.py	/^CUR_DIR = os.path.abspath(os.path.dirname(__file__))$/;"	v
CUR_DIR	bin/run-fxmark.py	/^CUR_DIR = os.path.abspath(os.path.dirname(__file__))$/;"	v
DBench	bin/run-dbench.py	/^class DBench(object):$/;"	c
DEPS	Makefile	/^DEPS	= $(wildcard $(SRC)\/*.h) $(LIBS) $(TC)$/;"	m
DESC	bin/cpuinfo.py	/^    DESC = '[1] IntelÂ® 64 and IA-32 Architectures Optimization Reference Manual.'$/;"	v	class:NehalemPrefetchSettings
DOC	bin/cpuinfo.py	/^    DOC = {'dcu_streamer':$/;"	v	class:NehalemPrefetchSettings
FX_OPT_MAX_PRIVATE	src/fxmark.h	6;"	d
FileBench	bin/run-filebench.py	/^class FileBench(object):$/;"	c
HDDDEV	bin/run-fxmark.py	/^    HDDDEV  = "\/dev\/pmem0"$/;"	v	class:Runner
HERE	src/bench.h	73;"	d
INITCPUINFO	bin/cpuinfo.py	/^INITCPUINFO = "\/var\/run\/initcpuinfo"$/;"	v
KernelBackTrace	bin/kibt.py	/^class KernelBackTrace(object):$/;"	c
LEN	src/DRBH_seq.c	17;"	d	file:
LEN	src/DRBL_seq.c	17;"	d	file:
LEVEL_LOW	bin/perfmon.py	/^    LEVEL_LOW                     = 0$/;"	v	class:PerfMon
LEVEL_PERF_LOCK	bin/perfmon.py	/^    LEVEL_PERF_LOCK               = 999 # Well, it is mostly useless.$/;"	v	class:PerfMon
LEVEL_PERF_PROBE_SLEEP_LOCK	bin/perfmon.py	/^    LEVEL_PERF_PROBE_SLEEP_LOCK   = 998 # Well, it it not useful for fxmark.$/;"	v	class:PerfMon
LEVEL_PERF_PROBE_SLEEP_LOCK_D	bin/perfmon.py	/^    LEVEL_PERF_PROBE_SLEEP_LOCK_D = 2$/;"	v	class:PerfMon
LEVEL_PERF_RECORD	bin/perfmon.py	/^    LEVEL_PERF_RECORD             = 1$/;"	v	class:PerfMon
LEVEL_PERF_STAT	bin/perfmon.py	/^    LEVEL_PERF_STAT               = 3$/;"	v	class:PerfMon
LIBS	Makefile	/^LIBS    = $(SRC)\/bench.c $(SRC)\/util.c$/;"	m
LOOPDEV	bin/run-fxmark.py	/^    LOOPDEV = "\/dev\/loop7"$/;"	v	class:Runner
MODEL_NAME	bin/cpupol.py	/^MODEL_NAME                    = "Intel(R) Xeon(R) CPU E7-8870 v2 @ 2.30GHz"$/;"	v
MODEL_NAME	src/cpupol.h	/^const char *MODEL_NAME                             = "Intel(R) Xeon(R) CPU E7-8870 v2 @ 2.30GHz";$/;"	v
NAME	bin/cpuinfo.py	/^    NAME = 'Nehalem'$/;"	v	class:NehalemCPU
NAME	bin/cpuinfo.py	/^    NAME = 'Unknown CPU'$/;"	v	class:UnknownCPU
NVMMDEV	bin/run-fxmark.py	/^    NVMMDEV = "\/dev\/pmem0"$/;"	v	class:Runner
NehalemCPU	bin/cpuinfo.py	/^class NehalemCPU(CPUBase):$/;"	c
NehalemPrefetchSettings	bin/cpuinfo.py	/^                               'dcu_streamer dcu_ip mlc_spatial mlc_streamer')):$/;"	c
PAGE_SIZE	src/bench.h	8;"	d
PATH_DEPTH	src/MRPH.c	16;"	d	file:
PATH_DEPTH	src/MRPM.c	16;"	d	file:
PATH_DEPTH	src/MRPM_bg.c	16;"	d	file:
PERF_SAMPLE_RATE	bin/perfmon.py	/^    PERF_SAMPLE_RATE              = 1000$/;"	v	class:PerfMon
PERF_STR	bin/run-dbench.py	/^    PERF_STR = "Throughput"$/;"	v	class:DBench
PERF_STR	bin/run-filebench.py	/^    PERF_STR = "IO Summary: "$/;"	v	class:FileBench
PHYSICAL_CHIPS	bin/cpupol.py	/^PHYSICAL_CHIPS                = 8$/;"	v
PHYSICAL_CHIPS	src/cpupol.h	/^const unsigned int PHYSICAL_CHIPS                  = 8;$/;"	v
PREFETCH_SETTINGS	bin/cpuinfo.py	/^    PREFETCH_SETTINGS = NehalemPrefetchSettings$/;"	v	class:NehalemCPU
PREFETCH_SETTINGS	bin/cpuinfo.py	/^    PREFETCH_SETTINGS = None$/;"	v	class:CPUBase
PRE_SCRIPT	bin/run-filebench.py	/^    PRE_SCRIPT = os.path.normpath(os.path.join(CUR_DIR, "turnoff-aslr"))$/;"	v	class:FileBench
PRIVATE_REGION_PAGE_NUM	src/DRBM.c	18;"	d	file:
PRIVATE_REGION_PAGE_NUM	src/DRBM_bg.c	16;"	d	file:
PRIVATE_REGION_PAGE_NUM	src/DRBM_seq.c	18;"	d	file:
PRIVATE_REGION_PAGE_NUM	src/DWOM.c	19;"	d	file:
PRIVATE_REGION_SIZE	src/DRBM.c	17;"	d	file:
PRIVATE_REGION_SIZE	src/DRBM_bg.c	15;"	d	file:
PRIVATE_REGION_SIZE	src/DRBM_seq.c	17;"	d	file:
PRIVATE_REGION_SIZE	src/DWOM.c	18;"	d	file:
PROBE_SLEEP_LOCK	bin/perfmon.py	/^    PROBE_SLEEP_LOCK = [$/;"	v	class:PerfMon
Parser	bin/parser.py	/^class Parser(object):$/;"	c
PerfMon	bin/perfmon.py	/^class PerfMon(object):$/;"	c
PerfStdio	bin/perfstdio.py	/^class PerfStdio(object):$/;"	c
Plotter	bin/plotter.py	/^class Plotter(object):$/;"	c
Q	Makefile	/^  Q = @$/;"	m
Q	Makefile	/^  Q =$/;"	m
Runner	bin/run-fxmark.py	/^class Runner(object):$/;"	c
SC_CLK_TCK	bin/perfmon.py	/^    SC_CLK_TCK = float(os.sysconf("SC_CLK_TCK"))$/;"	v	class:PerfMon
SMT_LEVEL	bin/cpupol.py	/^SMT_LEVEL                     = 1$/;"	v
SMT_LEVEL	src/cpupol.h	/^const unsigned int SMT_LEVEL                       = 1;$/;"	v
SRC	Makefile	/^SRC = src$/;"	m
SSDDEV	bin/run-fxmark.py	/^    SSDDEV  = "\/dev\/pmem0"$/;"	v	class:Runner
TC	Makefile	/^TC      = $(SRC)\/MWCM.c $(SRC)\/MWCL.c \\$/;"	m
UnknownCPU	bin/cpuinfo.py	/^class UnknownCPU(CPUBase):$/;"	c
WORKER_MAX_PRIVATE	src/bench.h	15;"	d
WORKLOAD_DIR	bin/run-dbench.py	/^    WORKLOAD_DIR = os.path.normpath(os.path.join(CUR_DIR, "dbench-workloads"))$/;"	v	class:DBench
WORKLOAD_DIR	bin/run-filebench.py	/^    WORKLOAD_DIR = os.path.normpath(os.path.join(CUR_DIR, "filebench-workloads"))$/;"	v	class:FileBench
_BITS	bin/cpuinfo.py	/^    _BITS = {'mlc_streamer': 0x01, 'mlc_spatial': 0x02,$/;"	v	class:NehalemPrefetchSettings
_LARGEFILE64_SOURCE	src/DWTL.c	9;"	d	file:
_LARGEFILE_SOURCE	src/DWTL.c	8;"	d	file:
_MASK	bin/cpuinfo.py	/^    _MASK = ~0x0F$/;"	v	class:NehalemPrefetchSettings
_MSR	bin/cpuinfo.py	/^    _MSR = 0x1a4$/;"	v	class:NehalemPrefetchSettings
__BENCH_H__	src/bench.h	2;"	d
__FX_H__	src/fxmark.h	2;"	d
__STDC_FORMAT_MACROS	src/DRBH.c	10;"	d	file:
__STDC_FORMAT_MACROS	src/DRBH_bg.c	10;"	d	file:
__STDC_FORMAT_MACROS	src/DRBH_seq.c	10;"	d	file:
__STDC_FORMAT_MACROS	src/DRBL.c	10;"	d	file:
__STDC_FORMAT_MACROS	src/DRBL_bg.c	10;"	d	file:
__STDC_FORMAT_MACROS	src/DRBL_seq.c	10;"	d	file:
__STDC_FORMAT_MACROS	src/DRBM.c	10;"	d	file:
__STDC_FORMAT_MACROS	src/DRBM_bg.c	10;"	d	file:
__STDC_FORMAT_MACROS	src/DRBM_seq.c	10;"	d	file:
__STDC_FORMAT_MACROS	src/DWAL.c	11;"	d	file:
__STDC_FORMAT_MACROS	src/DWOL.c	11;"	d	file:
__STDC_FORMAT_MACROS	src/DWOM.c	11;"	d	file:
__STDC_FORMAT_MACROS	src/DWSL.c	11;"	d	file:
__STDC_FORMAT_MACROS	src/DWTL.c	18;"	d	file:
__STDC_FORMAT_MACROS	src/MRDL.c	12;"	d	file:
__STDC_FORMAT_MACROS	src/MRDL_bg.c	12;"	d	file:
__STDC_FORMAT_MACROS	src/MRDM.c	12;"	d	file:
__STDC_FORMAT_MACROS	src/MRDM_bg.c	12;"	d	file:
__STDC_FORMAT_MACROS	src/MRPH.c	11;"	d	file:
__STDC_FORMAT_MACROS	src/MRPL.c	12;"	d	file:
__STDC_FORMAT_MACROS	src/MRPM.c	11;"	d	file:
__STDC_FORMAT_MACROS	src/MRPM_bg.c	11;"	d	file:
__STDC_FORMAT_MACROS	src/MWCL.c	11;"	d	file:
__STDC_FORMAT_MACROS	src/MWCM.c	12;"	d	file:
__STDC_FORMAT_MACROS	src/MWRL.c	12;"	d	file:
__STDC_FORMAT_MACROS	src/MWRM.c	13;"	d	file:
__STDC_FORMAT_MACROS	src/MWUL.c	14;"	d	file:
__STDC_FORMAT_MACROS	src/MWUM.c	14;"	d	file:
__USE_LARGEFILE64	src/DWTL.c	7;"	d	file:
__UTIL_H__	src/util.h	2;"	d
__all__	bin/cpuinfo.py	/^__all__ = ("INITCPUINFO getCPUSet parseCpuinfo findCpuinfo expandCpuinfo "$/;"	v
__del__	bin/run-dbench.py	/^    def __del__(self):$/;"	m	class:DBench	file:
__del__	bin/run-filebench.py	/^    def __del__(self):$/;"	m	class:FileBench	file:
__get_cpu_num	bin/parser.py	/^def __get_cpu_num(log, fs, bc, core, sp):$/;"	f	file:
__get_performance	bin/parser.py	/^def __get_performance(log, fs, bc):$/;"	f	file:
__init__	bin/cpuinfo.py	/^    def __init__(self, cpu):$/;"	m	class:CPUBase
__init__	bin/fs_locking_table.py	/^  def __init__(self, linux_src_dir):$/;"	m	class:BuildFSLockingTable
__init__	bin/kibt.py	/^    def __init__(self, ksrc, filename, verbose):$/;"	m	class:KernelBackTrace
__init__	bin/parser.py	/^    def __init__(self):$/;"	m	class:Parser
__init__	bin/perfmon.py	/^                 duration = 30):$/;"	m	class:PerfMon
__init__	bin/perfstdio.py	/^    def __init__(self, dir_name, out_dir_name = None):$/;"	m	class:PerfStdio
__init__	bin/plotter.py	/^    def __init__(self, log_file):$/;"	m	class:Plotter
__init__	bin/run-dbench.py	/^    def __init__(self, type_, ncore_, duration_, root_,$/;"	m	class:DBench
__init__	bin/run-filebench.py	/^    def __init__(self, type_, ncore_, duration_, root_,$/;"	m	class:FileBench
__init__	bin/run-fxmark.py	/^                 run_filter = ("*", "*", "*", "*", "*")):$/;"	m	class:Runner
__openmsr	bin/cpuinfo.py	/^    def __openmsr(self, msr, mode):$/;"	m	class:CPUBase	file:
__print_usage	bin/perfstdio.py	/^def __print_usage():$/;"	f	file:
__print_usage	bin/plotter.py	/^def __print_usage():$/;"	f	file:
_append_to_config	bin/run-filebench.py	/^    def _append_to_config(self, config_str):$/;"	m	class:FileBench
_cpu_stat_start	bin/perfmon.py	/^    def _cpu_stat_start(self):$/;"	m	class:PerfMon
_cpu_stat_stop	bin/perfmon.py	/^    def _cpu_stat_stop(self):$/;"	m	class:PerfMon
_end_of_func	bin/kibt.py	/^    def _end_of_func(self, asm_line):$/;"	m	class:KernelBackTrace
_exec_cmd	bin/perfmon.py	/^    def _exec_cmd(self, cmd, out=None):$/;"	m	class:PerfMon
_exec_cmd	bin/perfstdio.py	/^    def _exec_cmd(self, cmd, out=subprocess.STDOUT):$/;"	m	class:PerfStdio
_exec_cmd	bin/run-dbench.py	/^    def _exec_cmd(self, cmd, out=None):$/;"	m	class:DBench
_exec_cmd	bin/run-filebench.py	/^    def _exec_cmd(self, cmd, out=None):$/;"	m	class:FileBench
_gen_cmpdev_for_bench	bin/plotter.py	/^    def _gen_cmpdev_for_bench(self, ncore, bench):$/;"	m	class:Plotter
_gen_log_info	bin/plotter.py	/^    def _gen_log_info(self):$/;"	m	class:Plotter
_gen_pdf	bin/plotter.py	/^    def _gen_pdf(self, gp_file):$/;"	m	class:Plotter
_get_callee	bin/kibt.py	/^    def _get_callee(self, asm_line):$/;"	m	class:KernelBackTrace
_get_config	bin/plotter.py	/^    def _get_config(self):$/;"	m	class:Plotter
_get_cpu_stat	bin/perfmon.py	/^    def _get_cpu_stat(self):$/;"	m	class:PerfMon
_get_data_file	bin/plotter.py	/^        def _get_data_file(fs):$/;"	f	function:Plotter._plot_sc_data
_get_file_asm	bin/kibt.py	/^    def _get_file_asm(self):$/;"	m	class:KernelBackTrace
_get_fs_list	bin/plotter.py	/^    def _get_fs_list(self, media, bench, iomode):$/;"	m	class:Plotter
_get_func_asm	bin/kibt.py	/^    def _get_func_asm(self, asm_file, func):$/;"	m	class:KernelBackTrace
_get_func_name	bin/kibt.py	/^    def _get_func_name(self, asm_line):$/;"	m	class:KernelBackTrace
_get_inlined_backtrace	bin/kibt.py	/^    def _get_inlined_backtrace(self, func_asm, callee):$/;"	m	class:KernelBackTrace
_get_inlined_callee_info	bin/kibt.py	/^    def _get_inlined_callee_info(self, asm_line):$/;"	m	class:KernelBackTrace
_get_line	bin/parser.py	/^    def _get_line(self, pn):$/;"	m	class:Parser
_get_parse_fn	bin/parser.py	/^    def _get_parse_fn(self, l):$/;"	m	class:Parser
_get_pdf_name	bin/plotter.py	/^    def _get_pdf_name(self):$/;"	m	class:Plotter
_get_sc_style	bin/plotter.py	/^        def _get_sc_style(fs):$/;"	f	function:Plotter._plot_sc_data
_match_config	bin/run-fxmark.py	/^    def _match_config(self, key1, key2):$/;"	m	class:Runner
_match_key	bin/parser.py	/^    def _match_key(self, key1, key2):$/;"	m	class:Parser
_norm_key	bin/parser.py	/^    def _norm_key(self, ks):$/;"	m	class:Parser
_norm_str	bin/parser.py	/^    def _norm_str(self, s):$/;"	m	class:Parser
_parse_config	bin/parser.py	/^    def _parse_config(self, l):$/;"	m	class:Parser
_parse_data	bin/parser.py	/^    def _parse_data(self, l):$/;"	m	class:Parser
_parse_key	bin/parser.py	/^    def _parse_key(self, l):$/;"	m	class:Parser
_parse_schema	bin/parser.py	/^    def _parse_schema(self, l):$/;"	m	class:Parser
_perf_lock_record_start	bin/perfmon.py	/^    def _perf_lock_record_start(self):$/;"	m	class:PerfMon
_perf_lock_record_stop	bin/perfmon.py	/^    def _perf_lock_record_stop(self):$/;"	m	class:PerfMon
_perf_probe_add_trace_points	bin/perfmon.py	/^    def _perf_probe_add_trace_points(self, arg0):$/;"	m	class:PerfMon
_perf_probe_cleanup	bin/perfmon.py	/^    def _perf_probe_cleanup(self):$/;"	m	class:PerfMon
_perf_probe_cmdline	bin/perfmon.py	/^    def _perf_probe_cmdline(self, arg0):$/;"	m	class:PerfMon
_perf_probe_sleep_lock_start	bin/perfmon.py	/^    def _perf_probe_sleep_lock_start(self, arg0):$/;"	m	class:PerfMon
_perf_probe_sleep_lock_stop	bin/perfmon.py	/^    def _perf_probe_sleep_lock_stop(self):$/;"	m	class:PerfMon
_perf_record_start	bin/perfmon.py	/^    def _perf_record_start(self):$/;"	m	class:PerfMon
_perf_record_stop	bin/perfmon.py	/^    def _perf_record_stop(self):$/;"	m	class:PerfMon
_perf_stat_start	bin/perfmon.py	/^    def _perf_stat_start(self):$/;"	m	class:PerfMon
_perf_stat_stop	bin/perfmon.py	/^    def _perf_stat_stop(self):$/;"	m	class:PerfMon
_perf_stop	bin/perfmon.py	/^    def _perf_stop(self):$/;"	m	class:PerfMon
_plot_footer	bin/plotter.py	/^    def _plot_footer(self):$/;"	m	class:Plotter
_plot_header	bin/plotter.py	/^    def _plot_header(self):$/;"	m	class:Plotter
_plot_sc_data	bin/plotter.py	/^    def _plot_sc_data(self, media, bench, iomode):$/;"	m	class:Plotter
_plot_util_data	bin/plotter.py	/^    def _plot_util_data(self, media, ncore, bench, iomode):$/;"	m	class:Plotter
_run_dbench	bin/run-dbench.py	/^    def _run_dbench(self):$/;"	m	class:DBench
_run_filebench	bin/run-filebench.py	/^    def _run_filebench(self):$/;"	m	class:FileBench
_sh	bin/kibt.py	/^    def _sh(self, cmd, out=None, err=None, verbose=False):$/;"	m	class:KernelBackTrace
add_bg_worker_if_needed	bin/run-fxmark.py	/^    def add_bg_worker_if_needed(self, bench, ncore):$/;"	m	class:Runner
alloc_bench	src/bench.c	/^struct bench *alloc_bench(int ncpu, int nbg)$/;"	f
args	src/bench.h	/^	char args[BENCH_ARG_BYTES];$/;"	m	struct:bench
barrier	src/rdtsc.h	5;"	d
bench	src/bench.h	/^	struct bench *bench;$/;"	m	struct:worker	typeref:struct:worker::bench
bench	src/bench.h	/^struct bench {$/;"	s
bench_desc	src/fxmark.c	/^struct bench_desc {$/;"	s	file:
bench_operations	src/bench.h	/^struct bench_operations {$/;"	s
bench_table	src/fxmark.c	/^static struct bench_desc bench_table[] = {$/;"	v	typeref:struct:bench_desc	file:
bg_work	src/DRBH_bg.c	/^static int bg_work(struct worker *worker)$/;"	f	file:
bg_work	src/DRBL_bg.c	/^static int bg_work(struct worker *worker)$/;"	f	file:
bg_work	src/DRBM_bg.c	/^static int bg_work(struct worker *worker)$/;"	f	file:
bg_work	src/MRDL_bg.c	/^static int bg_work(struct worker *worker)$/;"	f	file:
bg_work	src/MRDM_bg.c	/^static int bg_work(struct worker *worker)$/;"	f	file:
bg_work	src/MRPM_bg.c	/^static int bg_work(struct worker *worker)$/;"	f	file:
buildInitialTable	bin/fs_locking_table.py	/^  def buildInitialTable(self):$/;"	m	class:BuildFSLockingTable
catch_ctrl_C	bin/run-fxmark.py	/^def catch_ctrl_C(sig, frame):$/;"	f
check	bin/cpuinfo.py	/^    def check(vendor, family, model):$/;"	m	class:NehalemCPU
check	bin/cpuinfo.py	/^    def check(vendor, family, model):$/;"	m	class:UnknownCPU
clocks	src/bench.h	/^	volatile uint64_t clocks; $/;"	m	struct:worker
cmd	bin/perfmon.py	/^    cmd = sys.argv[1]$/;"	v	class:PerfMon
cmd_fn	bin/perfmon.py	/^    cmd_fn = op.get(cmd, nop)$/;"	v	class:PerfMon
cmd_opt	src/fxmark.h	/^struct cmd_opt {$/;"	s
confirm_media_path	bin/run-fxmark.py	/^def confirm_media_path():$/;"	f
countAllHeaders	bin/fs_locking_table.py	/^  def countAllHeaders(self):$/;"	m	class:BuildFSLockingTable
countAllSources	bin/fs_locking_table.py	/^  def countAllSources(self):$/;"	m	class:BuildFSLockingTable
countHeaders	bin/fs_locking_table.py	/^  def countHeaders(self, fs, lock_type):$/;"	m	class:BuildFSLockingTable
countSources	bin/fs_locking_table.py	/^  def countSources(self, fs, lock_type):$/;"	m	class:BuildFSLockingTable
cpu_freq	src/rdtsc.c	/^uint64_t cpu_freq(void)$/;"	f
cpu_freq_measured	src/rdtsc.c	/^uint64_t cpu_freq_measured(void)$/;"	f
cur_dir	bin/list-cpus	/^    cur_dir = os.path.dirname( os.path.abspath(sys.modules[__name__].__file__) )$/;"	v
dbench	bin/run-dbench.py	/^    dbench = DBench(opts.type, opts.ncore, opts.duration, opts.root,$/;"	v	class:DBench
deinit_mem_disk	bin/run-fxmark.py	/^    def deinit_mem_disk(self):$/;"	m	class:Runner
desc	src/fxmark.c	/^	const char *desc;$/;"	m	struct:bench_desc	file:
directio	src/bench.h	/^	int	directio;$/;"	m	struct:bench
directio	src/fxmark.h	/^	int directio;$/;"	m	struct:cmd_opt
drop_caches	bin/run-fxmark.py	/^    def drop_caches(self):$/;"	m	class:Runner
duration	src/bench.h	/^	unsigned int duration;$/;"	m	struct:bench
duration	src/fxmark.h	/^	int duration;$/;"	m	struct:cmd_opt
exec_cmd	bin/fs_locking_table.py	/^  def exec_cmd(self, cmd, out=None):$/;"	m	class:BuildFSLockingTable
exec_cmd	bin/run-fxmark.py	/^    def exec_cmd(self, cmd, out=None):$/;"	m	class:Runner
expandCpuinfo	bin/cpuinfo.py	/^def expandCpuinfo(cpuinfo):$/;"	f
fg_work	src/DRBH_bg.c	/^static int fg_work(struct worker *worker)$/;"	f	file:
fg_work	src/DRBL_bg.c	/^static int fg_work(struct worker *worker)$/;"	f	file:
fg_work	src/DRBM_bg.c	/^static int fg_work(struct worker *worker)$/;"	f	file:
fg_work	src/MRDL_bg.c	/^static int fg_work(struct worker *worker)$/;"	f	file:
fg_work	src/MRDM_bg.c	/^static int fg_work(struct worker *worker)$/;"	f	file:
fg_work	src/MRPM_bg.c	/^static int fg_work(struct worker *worker)$/;"	f	file:
filebench	bin/run-filebench.py	/^    filebench = FileBench(opts.type, opts.ncore, opts.duration, opts.root,$/;"	v	class:FileBench
findCpuinfo	bin/cpuinfo.py	/^def findCpuinfo(paths = [INITCPUINFO, "\/proc\/cpuinfo"], needCPUs = None):$/;"	f
find_ops	src/fxmark.c	/^static struct bench_operations *find_ops(char *type)$/;"	f	file:
format_list	bin/list-cpus	/^def format_list(list, style):$/;"	f
from_msr	bin/cpuinfo.py	/^    def from_msr(cls, val):$/;"	m	class:NehalemPrefetchSettings
fx_opt	src/fxmark.h	/^struct fx_opt {$/;"	s
fx_opt_bench	src/fxmark.h	13;"	d
fx_opt_worker	src/fxmark.h	14;"	d
fxmark	bin/run-fxmark.py	/^    def fxmark(self, media, fs, bench, ncore, nfg, nbg, dio):$/;"	m	class:Runner
fxmark_cleanup	bin/run-fxmark.py	/^    def fxmark_cleanup(self):$/;"	m	class:Runner
fxmark_env	bin/run-fxmark.py	/^    def fxmark_env(self):$/;"	m	class:Runner
gen_cmpdev	bin/plotter.py	/^    def gen_cmpdev(self, ncore, out_dir):$/;"	m	class:Plotter
gen_config	bin/run-fxmark.py	/^    def gen_config(self):$/;"	m	class:Runner
gen_stdio	bin/perfstdio.py	/^    def gen_stdio(self):$/;"	m	class:PerfStdio
generate_config	bin/run-filebench.py	/^    def generate_config(self):$/;"	m	class:FileBench
getCPUClass	bin/cpuinfo.py	/^def getCPUClass():$/;"	f
getCPUSet	bin/cpuinfo.py	/^def getCPUSet(name):$/;"	f
get_bin_type	bin/run-fxmark.py	/^    def get_bin_type(self, bench):$/;"	m	class:Runner
get_config	bin/parser.py	/^    def get_config(self, key):$/;"	m	class:Parser
get_config	bin/run-dbench.py	/^    def get_config(self):$/;"	m	class:DBench
get_ncores	bin/run-fxmark.py	/^    def get_ncores(self):$/;"	m	class:Runner
get_prefetch_settings	bin/cpuinfo.py	/^    def get_prefetch_settings(self):$/;"	m	class:NehalemCPU
help	bin/list-cpus	/^                  help="a set of hyper threads")$/;"	v
help	bin/list-cpus	/^                  help="display results as a comma-separated list")$/;"	v
help	bin/list-cpus	/^                  help="display results as a space-separated list")$/;"	v
help	bin/list-cpus	/^                  help="display results as comma-separated ranges")$/;"	v
help	bin/list-cpus	/^                  help="display results as unordered comma-separated ranges")$/;"	v
help	bin/list-cpus	/^                  help="how many processors to output")$/;"	v
help	bin/list-cpus	/^                  help="list order of cpus")$/;"	v
help	bin/list-cpus	/^                  help="path to cpupolicy.py file (default: %default)")$/;"	v
help	bin/list-cpus	/^                  help="skip the first START matching processors")$/;"	v
id	src/bench.h	/^	int id;$/;"	m	struct:worker
init_NVMM_disk	bin/run-fxmark.py	/^    def init_NVMM_disk(self):$/;"	m	class:Runner
init_bench	src/fxmark.c	/^static void init_bench(struct bench *bench, struct cmd_opt *opt)$/;"	f	file:
init_hdd_disk	bin/run-fxmark.py	/^    def init_hdd_disk(self):$/;"	m	class:Runner
init_media	bin/run-fxmark.py	/^    def init_media(self, media):$/;"	m	class:Runner
init_mem_disk	bin/run-fxmark.py	/^    def init_mem_disk(self):$/;"	m	class:Runner
init_ssd_disk	bin/run-fxmark.py	/^    def init_ssd_disk(self):$/;"	m	class:Runner
is_bg	src/bench.h	/^	int is_bg;$/;"	m	struct:worker
kbt	bin/kibt.py	/^    kbt = KernelBackTrace(opts.ksrc, opts.file, opts.verbose)$/;"	v	class:KernelBackTrace
keep_sudo	bin/run-fxmark.py	/^    def keep_sudo(self):$/;"	m	class:Runner
list_cpus	bin/list-cpus	/^def list_cpus(order, thread=None, limit=None, style="space"):$/;"	f
log	bin/run-fxmark.py	/^    def log(self, log):$/;"	m	class:Runner
log_end	bin/run-fxmark.py	/^    def log_end(self):$/;"	m	class:Runner
log_start	bin/run-fxmark.py	/^    def log_start(self):$/;"	m	class:Runner
lt	bin/fs_locking_table.py	/^  lt = BuildFSLockingTable(sys.argv[1])$/;"	v	class:BuildFSLockingTable
main	src/fxmark.c	/^int main(int argc, char *argv[])$/;"	f
main	src/rdtsc.c	/^int main(int argc, char *argv[])$/;"	f
main_work	src/DRBH.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/DRBH_bg.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/DRBH_seq.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/DRBL.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/DRBL_bg.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/DRBL_seq.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/DRBM.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/DRBM_bg.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/DRBM_seq.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/DWAL.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/DWOL.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/DWOM.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/DWSL.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/DWTL.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/MRDL.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/MRDL_bg.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/MRDM.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/MRDM_bg.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/MRPH.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/MRPL.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/MRPM.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/MRPM_bg.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/MWCL.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/MWCM.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/MWRL.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/MWRM.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/MWUL.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/MWUM.c	/^static int main_work(struct worker *worker)$/;"	f	file:
main_work	src/bench.h	/^	int (*main_work)(struct worker*);$/;"	m	struct:bench_operations
maybeInt	bin/cpuinfo.py	/^def maybeInt(s):$/;"	f
mkdir_p	src/util.c	/^int mkdir_p(const char *path)$/;"	f
mods	src/MRPH.c	/^static const unsigned int mods[PATH_DEPTH] = {BRANCHING_OUT_FACTOR,$/;"	v	file:
mods	src/MRPM.c	/^static const unsigned int mods[PATH_DEPTH] = {BRANCHING_OUT_FACTOR,$/;"	v	file:
mods	src/MRPM_bg.c	/^static const unsigned int mods[PATH_DEPTH] = {BRANCHING_OUT_FACTOR,$/;"	v	file:
mount	bin/run-fxmark.py	/^    def mount(self, media, fs, mnt_path):$/;"	m	class:Runner
mount_NOVA	bin/run-fxmark.py	/^    def mount_NOVA(self, media, fs, mnt_path):$/;"	m	class:Runner
mount_anyfs	bin/run-fxmark.py	/^    def mount_anyfs(self, media, fs, mnt_path):$/;"	m	class:Runner
mount_daxfs	bin/run-fxmark.py	/^    def mount_daxfs(self, media, fs, mnt_path):$/;"	m	class:Runner
mount_ext4_data_jnl	bin/run-fxmark.py	/^    def mount_ext4_data_jnl(self, media, fs, mnt_path):$/;"	m	class:Runner
mount_ext4_no_jnl	bin/run-fxmark.py	/^    def mount_ext4_no_jnl(self, media, fs, mnt_path):$/;"	m	class:Runner
mount_pmfs	bin/run-fxmark.py	/^    def mount_pmfs(self, media, fs, mnt_path):$/;"	m	class:Runner
mount_tmpfs	bin/run-fxmark.py	/^    def mount_tmpfs(self, media, fs, mnt_path):$/;"	m	class:Runner
n_blk_alloc_ops	src/DWAL.c	/^struct bench_operations n_blk_alloc_ops = {$/;"	v	typeref:struct:bench_operations
n_blk_wrt_ops	src/DWOL.c	/^struct bench_operations n_blk_wrt_ops = {$/;"	v	typeref:struct:bench_operations
n_dir_ins_ops	src/MWRM.c	/^struct bench_operations n_dir_ins_ops = {$/;"	v	typeref:struct:bench_operations
n_dir_rd_bg_ops	src/MRDL_bg.c	/^struct bench_operations n_dir_rd_bg_ops = {$/;"	v	typeref:struct:bench_operations
n_dir_rd_ops	src/MRDL.c	/^struct bench_operations n_dir_rd_ops = {$/;"	v	typeref:struct:bench_operations
n_file_rd_bg_ops	src/DRBL_bg.c	/^struct bench_operations n_file_rd_bg_ops = {$/;"	v	typeref:struct:bench_operations
n_file_rd_ops	src/DRBL.c	/^struct bench_operations n_file_rd_ops = {$/;"	v	typeref:struct:bench_operations
n_file_rd_seq_ops	src/DRBL_seq.c	/^struct bench_operations n_file_rd_seq_ops = {$/;"	v	typeref:struct:bench_operations
n_file_rename_ops	src/MWRL.c	/^struct bench_operations n_file_rename_ops = {$/;"	v	typeref:struct:bench_operations
n_inode_alloc_ops	src/MWCL.c	/^struct bench_operations n_inode_alloc_ops = {$/;"	v	typeref:struct:bench_operations
n_jnl_cmt_ops	src/DWSL.c	/^struct bench_operations n_jnl_cmt_ops = {$/;"	v	typeref:struct:bench_operations
n_mtime_upt_ops	src/DWOM.c	/^struct bench_operations n_mtime_upt_ops = {$/;"	v	typeref:struct:bench_operations
n_path_rsl_bg_ops	src/MRPM_bg.c	/^struct bench_operations n_path_rsl_bg_ops = {$/;"	v	typeref:struct:bench_operations
n_path_rsl_ops	src/MRPM.c	/^struct bench_operations n_path_rsl_ops = {$/;"	v	typeref:struct:bench_operations
n_priv_path_rsl_ops	src/MRPL.c	/^struct bench_operations n_priv_path_rsl_ops = {$/;"	v	typeref:struct:bench_operations
n_shblk_rd_bg_ops	src/DRBH_bg.c	/^struct bench_operations n_shblk_rd_bg_ops = {$/;"	v	typeref:struct:bench_operations
n_shblk_rd_ops	src/DRBH.c	/^struct bench_operations n_shblk_rd_ops = {$/;"	v	typeref:struct:bench_operations
n_shblk_rd_seq_ops	src/DRBH_seq.c	/^struct bench_operations n_shblk_rd_seq_ops = {$/;"	v	typeref:struct:bench_operations
n_shdir_rd_bg_ops	src/MRDM_bg.c	/^struct bench_operations n_shdir_rd_bg_ops = {$/;"	v	typeref:struct:bench_operations
n_shdir_rd_ops	src/MRDM.c	/^struct bench_operations n_shdir_rd_ops = {$/;"	v	typeref:struct:bench_operations
n_shfile_rd_bg_ops	src/DRBM_bg.c	/^struct bench_operations n_shfile_rd_bg_ops = {$/;"	v	typeref:struct:bench_operations
n_shfile_rd_ops	src/DRBM.c	/^struct bench_operations n_shfile_rd_ops = {$/;"	v	typeref:struct:bench_operations
n_shfile_rd_seq_ops	src/DRBM_seq.c	/^struct bench_operations n_shfile_rd_seq_ops = {$/;"	v	typeref:struct:bench_operations
n_spath_rsl_ops	src/MRPH.c	/^struct bench_operations n_spath_rsl_ops = {$/;"	v	typeref:struct:bench_operations
name	src/fxmark.c	/^	const char *name;$/;"	m	struct:bench_desc	file:
nbg	src/bench.h	/^	int nbg;$/;"	m	struct:bench
nbg	src/fxmark.h	/^	int nbg;$/;"	m	struct:cmd_opt
ncore	src/fxmark.h	/^	int ncore;$/;"	m	struct:cmd_opt
ncpu	src/bench.h	/^	int ncpu;$/;"	m	struct:bench
nop	bin/perfmon.py	/^    def nop(x):$/;"	m	class:PerfMon
nop_pause	src/bench.c	/^static inline void nop_pause(void)$/;"	f	file:
op	bin/perfmon.py	/^    op = {"start":PerfMon.start,$/;"	v	class:PerfMon
ops	src/bench.h	/^	struct bench_operations ops;$/;"	m	struct:bench	typeref:struct:bench::bench_operations
ops	src/fxmark.c	/^	struct bench_operations *ops;$/;"	m	struct:bench_desc	typeref:struct:bench_desc::bench_operations	file:
ops	src/fxmark.h	/^	struct bench_operations *ops;$/;"	m	struct:cmd_opt	typeref:struct:cmd_opt::bench_operations
page	src/bench.h	/^	char *page;		\/*private data buffer*\/$/;"	m	struct:worker
parse	bin/parser.py	/^    def parse(self, log_file):$/;"	m	class:Parser
parseCpuinfo	bin/cpuinfo.py	/^def parseCpuinfo(path):$/;"	f
parseRange	bin/cpuinfo.py	/^def parseRange(r):$/;"	f
parse_option	src/fxmark.c	/^static int parse_option(int argc, char *argv[], struct cmd_opt *opt)$/;"	f	file:
parser	bin/kibt.py	/^    parser = optparse.OptionParser()$/;"	v	class:KernelBackTrace
parser	bin/list-cpus	/^parser = optparse.OptionParser("usage: %prog [options] <sorters and filters...>")$/;"	v
parser	bin/run-dbench.py	/^    parser = optparse.OptionParser()$/;"	v	class:DBench
parser	bin/run-filebench.py	/^    parser = optparse.OptionParser()$/;"	v	class:FileBench
perfmon	bin/perfmon.py	/^    perfmon = PerfMon()$/;"	v	class:PerfMon
plot_sc	bin/plotter.py	/^    def plot_sc(self, out_dir):$/;"	m	class:Plotter
plot_util	bin/plotter.py	/^    def plot_util(self, ncore, out_dir):$/;"	m	class:Plotter
post_work	bin/run-fxmark.py	/^    def post_work(self):$/;"	m	class:Runner
post_work	src/bench.h	/^	int (*post_work)(struct worker*);$/;"	m	struct:bench_operations
pre_work	bin/run-fxmark.py	/^    def pre_work(self):$/;"	m	class:Runner
pre_work	src/DRBH.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/DRBH_bg.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/DRBH_seq.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/DRBL.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/DRBL_bg.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/DRBL_seq.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/DRBM.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/DRBM_bg.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/DRBM_seq.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/DWAL.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/DWOL.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/DWOM.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/DWSL.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/DWTL.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/MRDL.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/MRDL_bg.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/MRDM.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/MRDM_bg.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/MRPH.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/MRPL.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/MRPM.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/MRPM_bg.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/MWCL.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/MWCM.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/MWRL.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/MWRM.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/MWUL.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/MWUM.c	/^static int pre_work(struct worker *worker)$/;"	f	file:
pre_work	src/bench.h	/^	int (*pre_work)(struct worker*);$/;"	m	struct:bench_operations
prepre_work	bin/run-fxmark.py	/^    def prepre_work(self, ncore):$/;"	m	class:Runner
printTable	bin/fs_locking_table.py	/^  def printTable(self):$/;"	m	class:BuildFSLockingTable
print_inlined_backtrace	bin/kibt.py	/^    def print_inlined_backtrace(self, caller, callee):$/;"	m	class:KernelBackTrace
profile_start_cmd	src/bench.h	/^	char profile_start_cmd[BENCH_PROFILE_CMD_BYTES];$/;"	m	struct:bench
profile_start_cmd	src/fxmark.h	/^	char *profile_start_cmd;$/;"	m	struct:cmd_opt
profile_stat_file	src/bench.h	/^	char profile_stat_file[PATH_MAX];$/;"	m	struct:bench
profile_stat_file	src/fxmark.h	/^	char *profile_stat_file;$/;"	m	struct:cmd_opt
profile_stop_cmd	src/bench.h	/^	char profile_stop_cmd[BENCH_PROFILE_CMD_BYTES];$/;"	m	struct:bench
profile_stop_cmd	src/fxmark.h	/^	char *profile_stop_cmd;$/;"	m	struct:cmd_opt
pseudo_random	src/util.h	/^inline static unsigned int pseudo_random(unsigned int x_n)$/;"	f
randomize_digits	src/MRPM.c	/^static void randomize_digits(unsigned int len, unsigned int *digits)$/;"	f	file:
randomize_digits	src/MRPM_bg.c	/^static void randomize_digits(unsigned int len, unsigned int *digits)$/;"	f	file:
rc	bin/run-dbench.py	/^    rc = dbench.run()$/;"	v	class:DBench
rc	bin/run-filebench.py	/^    rc = filebench.run()$/;"	v	class:FileBench
rdmsr	bin/cpuinfo.py	/^    def rdmsr(self, msr):$/;"	m	class:CPUBase
rdtsc	src/rdtsc.h	/^rdtsc(void)$/;"	f
rdtsc_beg	src/rdtsc.h	/^rdtsc_beg(void)$/;"	f
rdtsc_end	src/rdtsc.h	/^rdtsc_end(void)$/;"	f
rdtsc_overhead	src/rdtsc.c	/^uint64_t rdtsc_overhead(double *stddev_out)$/;"	f
ready	src/bench.h	/^	volatile int ready;$/;"	m	struct:worker
report	bin/run-dbench.py	/^    def report(self):$/;"	m	class:DBench
report	bin/run-filebench.py	/^    def report(self):$/;"	m	class:FileBench
report_bench	src/bench.c	/^void report_bench(struct bench *bench, FILE *out)$/;"	f
report_bench	src/bench.h	/^	void (*report_bench)(struct bench *bench, FILE *out);$/;"	m	struct:bench_operations
ret	src/bench.h	/^	volatile int ret;$/;"	m	struct:worker
root	src/fxmark.h	/^	char *root;$/;"	m	struct:cmd_opt
root	src/fxmark.h	/^	char root[PATH_MAX];$/;"	m	struct:fx_opt
rr_cores	bin/cpupol.py	/^rr_cores                      = [0,15,30,45,60,75,90,105,1,16,31,46,61,76,91,106,2,17,32,47,62,77,92,107,3,18,33,48,63,78,93,108,4,19,34,49,64,79,94,109,5,20,35,50,65,80,95,110,6,21,36,51,66,81,96,111,7,22,37,52,67,82,97,112,8,23,38,53,68,83,98,113,9,24,39,54,69,84,99,114,10,25,40,55,70,85,100,115,11,26,41,56,71,86,101,116,12,27,42,57,72,87,102,117,13,28,43,58,73,88,103,118,14,29,44,59,74,89,104,119]$/;"	v
rr_cores	src/cpupol.h	/^const unsigned int rr_cores[]                      = {0,15,30,45,60,75,90,105,1,16,31,46,61,76,91,106,2,17,32,47,62,77,92,107,3,18,33,48,63,78,93,108,4,19,34,49,64,79,94,109,5,20,35,50,65,80,95,110,6,21,36,51,66,81,96,111,7,22,37,52,67,82,97,112,8,23,38,53,68,83,98,113,9,24,39,54,69,84,99,114,10,25,40,55,70,85,100,115,11,26,41,56,71,86,101,116,12,27,42,57,72,87,102,117,13,28,43,58,73,88,103,118,14,29,44,59,74,89,104,119};$/;"	v
run	bin/run-dbench.py	/^    def run(self):$/;"	m	class:DBench
run	bin/run-filebench.py	/^    def run(self):$/;"	m	class:FileBench
run	bin/run-fxmark.py	/^    def run(self):$/;"	m	class:Runner
run_bench	src/bench.c	/^void run_bench(struct bench *bench)$/;"	f
run_config	bin/run-fxmark.py	/^    run_config = [$/;"	v
runner	bin/run-fxmark.py	/^        runner = Runner(c[0], c[1], c[2])$/;"	v
running_bench	src/bench.c	/^static struct bench *running_bench;$/;"	v	typeref:struct:bench	file:
same_digits	src/MRPH.c	/^static void same_digits(unsigned int len, unsigned int *digits)$/;"	f	file:
search_data	bin/parser.py	/^    def search_data(self, key_list = []):$/;"	m	class:Parser
seq_cores	bin/cpupol.py	/^seq_cores                     = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119]$/;"	v
seq_cores	src/cpupol.h	/^const unsigned int seq_cores[]                     = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119};$/;"	v
set_bg_digits	src/MRPM_bg.c	/^static void set_bg_digits(unsigned int len, $/;"	f	file:
set_bg_test_path	src/MRPM_bg.c	/^static void set_bg_test_path(struct worker *worker, $/;"	f	file:
set_cpus	bin/run-fxmark.py	/^    def set_cpus(self, ncore):$/;"	m	class:Runner
set_digits	src/MRPH.c	/^static void set_digits(unsigned int len,$/;"	f	file:
set_digits	src/MRPM.c	/^static void set_digits(unsigned int len, $/;"	f	file:
set_digits	src/MRPM_bg.c	/^static void set_digits(unsigned int len, $/;"	f	file:
set_prefetch_settings	bin/cpuinfo.py	/^    def set_prefetch_settings(self, nps):$/;"	m	class:NehalemCPU
set_renamed_test_file	src/MWRM.c	/^static void set_renamed_test_file(struct worker *worker, $/;"	f	file:
set_shared_test_root	src/DRBH.c	/^static void set_shared_test_root(struct worker *worker, char *test_root)$/;"	f	file:
set_shared_test_root	src/DRBH_bg.c	/^static void set_shared_test_root(struct worker *worker, char *test_root)$/;"	f	file:
set_shared_test_root	src/DRBH_seq.c	/^static void set_shared_test_root(struct worker *worker, char *test_root)$/;"	f	file:
set_shared_test_root	src/DRBM.c	/^static void set_shared_test_root(struct worker *worker, char *test_root)$/;"	f	file:
set_shared_test_root	src/DRBM_bg.c	/^static void set_shared_test_root(struct worker *worker, char *test_root)$/;"	f	file:
set_shared_test_root	src/DRBM_seq.c	/^static void set_shared_test_root(struct worker *worker, char *test_root)$/;"	f	file:
set_shared_test_root	src/DWOM.c	/^static void set_shared_test_root(struct worker *worker, char *test_root)$/;"	f	file:
set_test_file	src/DRBH.c	/^static void set_test_file(struct worker *worker, char *test_root)$/;"	f	file:
set_test_file	src/DRBH_bg.c	/^static void set_test_file(struct worker *worker, char *test_root)$/;"	f	file:
set_test_file	src/DRBH_seq.c	/^static void set_test_file(struct worker *worker, char *test_root)$/;"	f	file:
set_test_file	src/DRBM.c	/^static void set_test_file(struct worker *worker, char *test_root)$/;"	f	file:
set_test_file	src/DRBM_bg.c	/^static void set_test_file(struct worker *worker, char *test_root)$/;"	f	file:
set_test_file	src/DRBM_seq.c	/^static void set_test_file(struct worker *worker, char *test_root)$/;"	f	file:
set_test_file	src/DWOM.c	/^static void set_test_file(struct worker *worker, char *test_root)$/;"	f	file:
set_test_file	src/DWTL.c	/^static void set_test_file(struct worker *worker,$/;"	f	file:
set_test_file	src/MRDL.c	/^static void set_test_file(struct worker *worker, $/;"	f	file:
set_test_file	src/MRDL_bg.c	/^static void set_test_file(struct worker *worker, $/;"	f	file:
set_test_file	src/MRDM.c	/^static void set_test_file(struct worker *worker, $/;"	f	file:
set_test_file	src/MRDM_bg.c	/^static void set_test_file(struct worker *worker, $/;"	f	file:
set_test_file	src/MRPL.c	/^static void set_test_file(struct worker *worker, char *test_file)$/;"	f	file:
set_test_file	src/MWRL.c	/^static void set_test_file(struct worker *worker, $/;"	f	file:
set_test_file	src/MWRM.c	/^static void set_test_file(struct worker *worker, $/;"	f	file:
set_test_file	src/MWUL.c	/^static void set_test_file(struct worker *worker,$/;"	f	file:
set_test_file	src/MWUM.c	/^static void set_test_file(struct worker *worker,$/;"	f	file:
set_test_path	src/MRPH.c	/^static void set_test_path(struct worker *worker,$/;"	f	file:
set_test_path	src/MRPM.c	/^static void set_test_path(struct worker *worker, $/;"	f	file:
set_test_path	src/MRPM_bg.c	/^static void set_test_path(struct worker *worker, $/;"	f	file:
set_test_root	src/DRBL.c	/^static void set_test_root(struct worker *worker, char *test_root)$/;"	f	file:
set_test_root	src/DRBL_bg.c	/^static void set_test_root(struct worker *worker, char *test_root)$/;"	f	file:
set_test_root	src/DRBL_seq.c	/^static void set_test_root(struct worker *worker, char *test_root)$/;"	f	file:
set_test_root	src/DWAL.c	/^static void set_test_root(struct worker *worker, char *test_root)$/;"	f	file:
set_test_root	src/DWOL.c	/^static void set_test_root(struct worker *worker, char *test_root)$/;"	f	file:
set_test_root	src/DWSL.c	/^static void set_test_root(struct worker *worker, char *test_root)$/;"	f	file:
set_test_root	src/MRDL.c	/^static void set_test_root(struct worker *worker, char *test_root)$/;"	f	file:
set_test_root	src/MRDL_bg.c	/^static void set_test_root(struct worker *worker, char *test_root)$/;"	f	file:
set_test_root	src/MRDM.c	/^static void set_test_root(struct worker *worker, char *test_root)$/;"	f	file:
set_test_root	src/MRDM_bg.c	/^static void set_test_root(struct worker *worker, char *test_root)$/;"	f	file:
set_test_root	src/MWCL.c	/^static void set_test_root(struct worker *worker, char *test_root)$/;"	f	file:
set_test_root	src/MWRL.c	/^static void set_test_root(struct worker *worker, char *test_root)$/;"	f	file:
set_test_root	src/MWRM.c	/^static void set_test_root(struct worker *worker, char *test_root)$/;"	f	file:
set_test_root	src/MWUL.c	/^static void set_test_root(struct worker *worker, char *test_root) {$/;"	f	file:
setaffinity	src/bench.c	/^static int setaffinity(int c)$/;"	f	file:
setup_workload	bin/run-filebench.py	/^    def setup_workload(self):$/;"	m	class:FileBench
sighandler	src/DWTL.c	/^static void sighandler(int x)$/;"	f	file:
sighandler	src/MRDL.c	/^static void sighandler(int x)$/;"	f	file:
sighandler	src/MRDL_bg.c	/^static void sighandler(int x)$/;"	f	file:
sighandler	src/MRDM.c	/^static void sighandler(int x)$/;"	f	file:
sighandler	src/MRDM_bg.c	/^static void sighandler(int x)$/;"	f	file:
sighandler	src/MWRM.c	/^static void sighandler(int x)$/;"	f	file:
sighandler	src/MWUL.c	/^static void sighandler(int x)$/;"	f	file:
sighandler	src/MWUM.c	/^static void sighandler(int x)$/;"	f	file:
sighandler	src/bench.c	/^static void sighandler(int x)$/;"	f	file:
sort	bin/list-cpus	/^                    sort=False)$/;"	v
start	bin/perfmon.py	/^    def start(self):$/;"	m	class:PerfMon
start	src/bench.h	/^	volatile int start;$/;"	m	struct:bench
stop	bin/perfmon.py	/^    def stop(self):$/;"	m	class:PerfMon
stop	src/bench.h	/^	volatile int stop;$/;"	m	struct:bench
stop_pre_work	src/DWTL.c	/^static int stop_pre_work;$/;"	v	file:
stop_pre_work	src/MRDL.c	/^static int stop_pre_work;$/;"	v	file:
stop_pre_work	src/MRDL_bg.c	/^static int stop_pre_work;$/;"	v	file:
stop_pre_work	src/MRDM.c	/^static int stop_pre_work;$/;"	v	file:
stop_pre_work	src/MRDM_bg.c	/^static int stop_pre_work;$/;"	v	file:
stop_pre_work	src/MWRM.c	/^static int stop_pre_work;$/;"	v	file:
stop_pre_work	src/MWUL.c	/^static int stop_pre_work;$/;"	v	file:
stop_pre_work	src/MWUM.c	/^static int stop_pre_work;$/;"	v	file:
str	bin/list-cpus	/^    str = list_cpus(options.order, options.thread, options.limit, options.display)$/;"	v
strRange	bin/cpuinfo.py	/^def strRange(cpus):$/;"	f
strRange	bin/list-cpus	/^def strRange(cpus):$/;"	f
test_hw_thr_cnts_coarse_grain	bin/cpupol.py	/^test_hw_thr_cnts_coarse_grain = [1,2,4,15,30,45,60,75,90,105,120]$/;"	v
test_hw_thr_cnts_coarse_grain	src/cpupol.h	/^const unsigned int test_hw_thr_cnts_coarse_grain[] = {1,2,4,15,30,45,60,75,90,105,120};$/;"	v
test_hw_thr_cnts_fine_grain	bin/cpupol.py	/^test_hw_thr_cnts_fine_grain   = [1,2,4,7,15,21,28,30,35,42,45,49,56,60,63,70,75,77,84,90,98,105,112,120]$/;"	v
test_hw_thr_cnts_fine_grain	src/cpupol.h	/^const unsigned int test_hw_thr_cnts_fine_grain[]   = {1,2,4,7,15,21,28,30,35,42,45,49,56,60,63,70,75,77,84,90,98,105,112,120};$/;"	v
to_msr	bin/cpuinfo.py	/^    def to_msr(self):$/;"	m	class:NehalemPrefetchSettings
u_file_cr_ops	src/MWCM.c	/^struct bench_operations u_file_cr_ops = {$/;"	v	typeref:struct:bench_operations
u_file_rm_ops	src/MWUL.c	/^struct bench_operations u_file_rm_ops = {$/;"	v	typeref:struct:bench_operations
u_file_tr_ops	src/DWTL.c	/^struct bench_operations u_file_tr_ops = {$/;"	v	typeref:struct:bench_operations
u_sh_file_rm_ops	src/MWUM.c	/^struct bench_operations u_sh_file_rm_ops = {$/;"	v	typeref:struct:bench_operations
umount	bin/run-fxmark.py	/^    def umount(self, where):$/;"	m	class:Runner
unset_loopdev	bin/run-fxmark.py	/^    def unset_loopdev(self):$/;"	m	class:Runner
usage	src/fxmark.c	/^static void usage(FILE *out)$/;"	f	file:
usec	src/bench.c	/^static uint64_t usec(void)$/;"	f	file:
usecs	src/bench.h	/^	volatile uint64_t usecs;$/;"	m	struct:worker
wait	src/bench.c	/^static void wait(struct bench *bench)$/;"	f	file:
wmb	src/bench.c	/^static inline void wmb(void)$/;"	f	file:
worker	src/bench.h	/^struct worker {$/;"	s
worker_main	src/bench.c	/^static void worker_main(void *arg)$/;"	f	file:
workers	src/bench.h	/^	struct worker *workers; $/;"	m	struct:bench	typeref:struct:bench::worker
works	src/bench.h	/^	volatile double   works;$/;"	m	struct:worker
wrmsr	bin/cpuinfo.py	/^    def wrmsr(self, msr, val):$/;"	m	class:CPUBase
